<?php
/**
 * Copyright (c) 2016
 * Created by: icare-baonq
 */

/**
 * Created by PhpStorm.
 * User: baonguyen
 * Date: 9/13/16
 * Time: 10:19 AM
 */

namespace Icare\Sales\Block\Adminhtml\Order;


use Magento\Framework\App\ObjectManager;
use Magento\Sales\Model\Order;

class View extends \Magento\Sales\Block\Adminhtml\Order\View
{
    /**
     * Role helper
     *
     * @var \Icare\User\Helper\Role
     */
    protected $_roleHelper;

    /**
     * Order helper
     *
     * @var \Icare\Sales\Helper\Order
     */
    protected $_orderHelper;

    /**
     * @param \Magento\Backend\Block\Widget\Context $context
     * @param \Magento\Framework\Registry $registry
     * @param \Magento\Sales\Model\Config $salesConfig
     * @param \Magento\Sales\Helper\Reorder $reorderHelper
     * @param \Magento\Backend\Model\Auth\Session $authSession
     * @param \Icare\User\Helper\Role $roleHelper
     * @param \Icare\Sales\Helper\Order $orderHelper
     * @param array $data
     */
    public function __construct(
        \Magento\Backend\Block\Widget\Context $context,
        \Magento\Framework\Registry $registry,
        \Magento\Sales\Model\Config $salesConfig,
        \Magento\Sales\Helper\Reorder $reorderHelper,
        \Magento\Backend\Model\Auth\Session $authSession,
        \Icare\User\Helper\Role $roleHelper,
        \Icare\Sales\Helper\Order $orderHelper,
        array $data = []
    ) {
        $this->_authSession = $authSession;
        $this->_roleHelper = $roleHelper;
        $this->_orderHelper = $orderHelper;
        parent::__construct($context, $registry, $salesConfig, $reorderHelper, $data);
    }

    protected function _construct()
    {
        $result = parent::_construct(); // TODO: Change the autogenerated stub
        $order = $this->getOrder();
        $user = $this->_authSession->getUser();
        if (!$this->_roleHelper->checkSpecialUser($user) && !$this->_orderHelper->checkOrderOwner($order, $user)) {
            $buttonItems = $this->buttonList->getItems();
            foreach ($buttonItems[0] as $key => $value) {
                $this->buttonList->remove($key);
            }
            return $result;
        }

        $this->buttonList->add(
            'order_repush_netsuite',
            [
                'label' => __('Push To Netsuite'),
                'class' => 'cancel',
                'id' => 'order-view-repush-netsuite-button',
                'onclick' => 'setLocation(\'' . $this->getPushNetSuiteUrl() . '\')'
            ]
        );
        if($order->getStatus() == 'pending')
            $this->buttonList->add(
                'order_push_mifos',
                [
                    'label' => __('Push To Mifos'),
                    'class' => 'cancel',
                    'id' => 'order-view-push-mifos-button',
                    'onclick' => 'javascript:void(0);'
                ],0,5
            );
        return $result;
    }

    /**
     * getSavingStatus
     * @return array
     */
    public function getSavingStatus(){
        $savingAccountUsed = FALSE;
        $savingAccountAmount = 0;
        $order = $this->getOrder();
        if($order){
            $savingAccountUsed = $order->getData('saving_account');
            $savingAccountAmount = $order->getData('saving_account_amount');
        }

        return [
            'used' => $savingAccountUsed,
            'amount' =>$savingAccountAmount
        ];
    }

    /**
     * isAutoconfirm
     * @return bool
     */
    public function isAutoconfirm(){
        $order = $this->getOrder();
        return $order->getData('auto_confirmation') == 1;
    }

    protected function getPushNetSuiteUrl() {
        return $this->getUrl('sales/*/pushtonetsuite');
    }
}